// spring 2019 exam 2 page 3 questions

int AVLTree::findMaxRecursive ( TreeNode∗ curNode ) {
  if ( curNode->right != nullptr )
    return findMaxRecursive(curNode->right);
  else
    return curNode->value;
}


int AVLTree::findMaxIterative(){
  TreeNode∗ curNode = this−>root; // assume root will not be null

  for ( ; curNode->right != nullptr; curNode = curNode->right );
  
  //while ( curNode->right != nullptr )
  //  curNode = curNode->right;
  
  return curNode->value;
}

// fall 2019 exam 2 page 3 questions

getCommonAncestor()

- parameters are: root, node a, node b
- find path from root -> a (log n time: modified BST find)
- find path from root -> b (log n time: modified BST find)
- length of paths is at most log n
- starting at root node in the paths, progress down the paths until you find the last node that is the same
- that is the lowest common ancestor


int sumLeaves(BSTNode *node) {
  if ( node == nullptr )
    return 0;
  else if ( node->left == nullptr && node->right == nullptr ) // node is a leaf
    return node->value;
  else // node is not a leaf
    return sumLeaves(node->left) + sumLeaves(node->right);
}
